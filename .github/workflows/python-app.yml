# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Wordle AI Tests

on: [push, pull_request]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.10
      uses: actions/setup-python@v2
      with:
        python-version: "3.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pytest-cov coverage
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        python -m pytest --cov=./ --cov-report=xml:./coverage/reports/coverage.xml tests/unit_tests/
        python -m pytest tests/integrations_tests/
        coverage report -m > ${{GITHUB_WORKSPACE}}/coverage/reports/coverage.txt

#    - name: Extract branch name
#      shell: bash
#      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
#      id: extract_branch
#
#    - name: Commit files
#      id: commit
#      run: |
#        git config --local user.email "action@github.com"
#        git config --local user.name "github-actions"
#        git add --all
#        if [-z "$(git status --porcelain)"]; then
#           echo "::set-output name=push::false"
#        else
#           git commit -m "Add changes" -a
#           echo "::set-output name=push::true"
#        fi
#      shell: bash
#
#    - name: Push changes
#      if: commit.outputs.push == 'true'
#      uses: ad-m/github-push-action@${{ steps.extract_branch.outputs.branch }}
#      with:
#        github_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        flags: pytest # optional
        directory: ./coverage/reports/
        files: ./coverage/reports/coverage.xml
        name: codecov-umbrella # optional
        fail_ci_if_error: true # optional (default = false)
        verbose: true # optional (default = false)
